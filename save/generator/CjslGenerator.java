/**
 * generated by Xtext
 */
package de.thm.icampus.cjsl.generator;

import com.google.common.collect.Iterables;
import com.google.inject.Inject;
import de.thm.icampus.cjsl.cjsl.Application;
import de.thm.icampus.cjsl.generator.ConfigGenerator;
import de.thm.icampus.cjsl.generator.SQLGenerator;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.generator.OutputConfiguration;
import org.eclipse.xtext.parser.IEncodingProvider;
import org.eclipse.xtext.resource.IResourceServiceProvider;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class CjslGenerator implements IGenerator {
  private JavaIoFileSystemAccess genData;
  
  public final static String DEFAULT_OUTPUT_ONCE = "DEFAULT_OUTPUT_ONCE";
  
  @Inject
  private IEncodingProvider encodingProvider;
  
  @Inject
  private IResourceServiceProvider.Registry registry;
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    try {
      JavaIoFileSystemAccess _javaIoFileSystemAccess = new JavaIoFileSystemAccess(this.registry, this.encodingProvider);
      this.genData = _javaIoFileSystemAccess;
      TreeIterator<EObject> _allContents = resource.getAllContents();
      Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
      Iterable<Application> _filter = Iterables.<Application>filter(_iterable, Application.class);
      for (final Application e : _filter) {
        {
          String _joomlaPath = e.getJoomlaPath();
          File joomlaPath = new File(_joomlaPath);
          String appsname = e.getName();
          String _applicationPath = e.getApplicationPath();
          String _plus = (_applicationPath + "/");
          String _plus_1 = (_plus + appsname);
          File applicationDestinatination = new File(_plus_1);
          int counter = 1;
          boolean _exists = applicationDestinatination.exists();
          boolean _while = _exists;
          while (_while) {
            {
              String _name = e.getName();
              String _plus_2 = (_name + "_");
              String _plus_3 = (_plus_2 + Integer.valueOf(counter));
              appsname = _plus_3;
              String _applicationPath_1 = e.getApplicationPath();
              String _plus_4 = (_applicationPath_1 + "/");
              String _plus_5 = (_plus_4 + appsname);
              File _file = new File(_plus_5);
              applicationDestinatination = _file;
              counter = (counter + 1);
            }
            boolean _exists_1 = applicationDestinatination.exists();
            _while = _exists_1;
          }
          ConfigGenerator conf = new ConfigGenerator(this.genData, e);
          SQLGenerator sqldata = new SQLGenerator(this.genData, e, appsname);
          String _applicationPath_1 = e.getApplicationPath();
          Map<String,OutputConfiguration> _mapOutputConfigurations = this.mapOutputConfigurations(appsname, _applicationPath_1);
          this.genData.setOutputConfigurations(_mapOutputConfigurations);
          boolean _exists_1 = joomlaPath.exists();
          if (_exists_1) {
            conf.extractArchive(joomlaPath, applicationDestinatination);
            conf.generateConfig();
            sqldata.generateSQLData();
          } else {
            throw new FileNotFoundException("The Source Path of Joomla not found");
          }
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public Map<String,OutputConfiguration> mapOutputConfigurations(final String order, final String path) {
    OutputConfiguration defaultOutput = new OutputConfiguration(IFileSystemAccess.DEFAULT_OUTPUT);
    defaultOutput.setDescription("Output Folder");
    defaultOutput.setOutputDirectory(((path + "/") + order));
    defaultOutput.setOverrideExistingResources(true);
    defaultOutput.setCreateOutputDirectory(true);
    defaultOutput.setCleanUpDerivedResources(true);
    defaultOutput.setSetDerivedProperty(true);
    Map<String,OutputConfiguration> mapconfig = new HashMap<String, OutputConfiguration>();
    mapconfig.put("DEFAULT_OUTPUT", defaultOutput);
    return mapconfig;
  }
}
